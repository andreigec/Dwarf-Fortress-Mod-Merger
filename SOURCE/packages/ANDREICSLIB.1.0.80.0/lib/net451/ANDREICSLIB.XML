<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ANDREICSLIB</name>
    </assembly>
    <members>
        <member name="T:ANDREICSLIB.ClassExtras.ArrayExtras">
            <summary>
            example usage: https://github.com/andreigec/Crossword-Puzzle-Solver
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.BitmapExtras">
            <summary>
            example usage: https://github.com/andreigec/MTG-Proxy-Maker
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.BitmapExtras.OnlyAllowBlackAndColour(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            replace all colours apart from the one passed in with white, and the passed in colour as black
            </summary>
            <param name="Bmp"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.BitmapExtras.Crop(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            crop the image based on a new width and height
            </summary>
            <param name="inbit">in image</param>
            <param name="newWidth">a size, or -1 for the input size</param>
            <param name="newHeight">a size, or -1 for the input size</param>
            <param name="startx"> </param>
            <param name="starty"> </param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.CheckedListBoxExtras">
            <summary>
            example usage: https://github.com/andreigec/BeadSprite-Pro
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.ContextMenuStripExtras">
            <summary>
            example usage: https://github.com/andreigec/Word-Find-Solver
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ContextMenuStripExtras.GetContextParent(System.Object,System.Type)">
            <summary>
            get the parent of a context menu, either opening up, or a tool strip right click
            </summary>
            <param name="senderToolStrip"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.DirectoryExtras">
            <summary>
            example usage: https://github.com/andreigec/MTG-Proxy-Maker
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.DirectoryExtras.GetFilesRecursive(System.String)">
            <summary>
            get all the files under a folder
            </summary>
            <param name="absolutePath">must be the absolute path, not the relative path</param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.DirectoryExtras.DeleteDirectory(System.String)">
            <summary>
            delete a directory and all its files
            </summary>
            <param name="folderName"></param>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.ListExtras">
            <summary>
            example usage: https://github.com/andreigec/Phrase-Profiler
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.TabPageExtras">
            <summary>
            example usage: https://github.com/andreigec/Consultant-Plus
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.ColorExtras">
            <summary>
            example usage: https://github.com/andreigec/Meal-Chooser
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.DictionaryExtras">
            <summary>
            example usage: https://github.com/andreigec/Music-File-Info-Editor
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.DictionaryExtras.DictToListOfListViewItems(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Convert a dictionary of key/value to a list of listviewitems
            </summary>
            <param name="origDict">Input Dictionary, string as the key for the text/name, and a list of strings in the value, for subitems</param>
            <returns>a list of listviewitems made from a dictionary</returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.DictionaryExtras.DictToListOfListViewItems(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Convert a dictionary of key/value to a list of listviewitems
            </summary>
            <param name="origDict">Input Dictionary, string as the key for the text/name, and a string in the value, for a subitem</param>
            <returns>a list of listviewitems made from a dictionary</returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.DictionaryExtras.Deserialize(System.IO.Stream)">
            <summary>
            load json from a filestream into a dictionary
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.FileExtras">
            <summary>
            example usage: https://github.com/andreigec/Dwarf-Fortress-Mod-Merger
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.FileExtras.LoadFile(System.String)">
            <summary>
            load a file from a path into a string
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.FileExtras.MergeDirectories(System.String,System.String)">
            <summary>
            move all the children items from merge to based, overwriting existing
            </summary>
            <param name="based">dest directory,=</param>
            <param name="merge">directory to moverge into dest</param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.FileExtras.DeleteDirectory(System.String)">
            <summary>
            delete directory if exists
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.FileExtras.CreateFile(System.String)">
            <summary>
            create a file and then close the stream
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.FileExtras.CreateDirectory(System.String)">
            <summary>
            create directory if doesnt exist
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.FileExtras.GetAbsoluteFilePath(System.String,System.String)">
            <summary>
            get the matching file for a substring of the file name
            </summary>
            <param name="partialFN">a part of the file name to look for</param>
            <param name="basedir"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ExpandoObjectHelpers.ToExpando(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Extension method that turns a dictionary of string and object to an ExpandoObject
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.SaveFileDialogExtras">
            <summary>
            example usage: https://github.com/andreigec/Histogram-OCR-Trainer
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.SaveFileDialogExtras.createFilter(System.Collections.Generic.List{System.Tuple{System.String,System.String}})">
            <summary>
            create the SFD filter string
            </summary>
            <param name="descAndExt">tuple with description, fileext eg: JPeg Image, *.jpg</param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.SaveFileDialogExtras.createFilter(System.String,System.String)">
            <summary>
            create the SFD filter string
            </summary>
            <param name="description">eg: JPeg Image</param>
            <param name="extension">eg  *.jpg</param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.TextboxExtras">
            <summary>
            example usage: https://github.com/andreigec/Squarification
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.TextboxExtras.HandleInputAsFloat(System.Char,System.Windows.Forms.Control)">
            <summary>
            quick handle for floats - Connect to keyboard-keypress event. Pass in KeyChar, and make the return value = e.Handled
            </summary>
            <param name="c">e.KeyChar</param>
            <returns>e.Handled</returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.TextboxExtras.HandleInput(ANDREICSLIB.ClassExtras.TextboxExtras.InputType,System.Char,System.Windows.Forms.Control)">
            <summary>
            Quick keyboard handling of fields - Connect to keyboard-keypress event. Pass in KeyChar, and make the return value = e.Handled
            </summary>
            <param name="IT">the input type</param>
            <param name="keyChar">e.KeyChar</param>
            <param name="c">ref to the textbox/combobox for ctrl+a keys, not required</param>
            <returns>e.Handled</returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.TextboxExtras.InputType.CreateAllTrue">
            <summary>
            set all types to input param
            </summary>
            <param name="allType"></param>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.ListViewExtras">
            <summary>
            example usage: https://github.com/andreigec/Consultant-Plus
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.SwapIndicies(System.Windows.Forms.ListView,System.Int32,System.Int32)">
            <summary>
            swap two rows given by their index
            </summary>
            <param name="lv"> </param>
            <param name="index1">First Index to Swap</param>
            <param name="index2">Second Index to Swap</param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.AutoResize(System.Windows.Forms.ListView)">
            <summary>
            resize all columns to best fit the header and the contents
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.InitColumnHeaders(System.Windows.Forms.ListView,System.Collections.Generic.List{System.String})">
            <summary>
            Initialise the columns to be those in a list of strings
            </summary>
            <param name="columnList">The list of strings to be made columns of</param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.InitColumnHeaders(System.Windows.Forms.ListView,System.Type)">
            <summary>
            init the column headers from a class' public variables
            </summary>
            <param name="lv"></param>
            <param name="t"></param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.SelectAllItems(System.Windows.Forms.ListView)">
            <summary>
            Select all the items in the list view
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.GetColumnNumber(System.Windows.Forms.ListView,System.String,System.String)">
            <summary>
            get the index of a column name
            </summary>
            <param name="columnName">the column name</param>
            <returns>the index of the column, -1 if not found</returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.CopyClassToListView(System.Windows.Forms.ListView,System.Object,System.Windows.Forms.ListViewItem)">
            <summary>
            add a line item comparing the header text with the object field names
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lv"></param>
            <param name="classInstance"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.EnsureSubItemCount(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem)">
            <summary>
            make the LVI subitem count match the column count
            </summary>
            <param name="lv"></param>
            <param name="lvi"></param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ListViewExtras.GetListViewItemRowValuesAndColumnName(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem,System.String)">
            <summary>
            returns a tuple of column header name, and the row value for this LVI
            </summary>
            <param name="LVI"></param>
            <param name="LVIField"></param>
            <returns>column header name,row value</returns>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.ObjectExtras">
            <summary>
            example usage: https://github.com/andreigec/Image-Scripter
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ObjectExtras.AddToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Add a tooltip to a control
            </summary>
            <param name="C">the control to add the tooltip to</param>
            <param name="text">the tooltip text</param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.ObjectExtras.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.MathExtras">
            <summary>
            example usage: https://github.com/andreigec/Meal-Chooser
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.StringExtras">
            <summary>
            example usage: https://github.com/andreigec/Folder-View
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.ContainsSubStringCount(System.String,System.String)">
            <summary>
            count how many occurences of a substring occur in a string
            </summary>
            <param name="instr"></param>
            <param name="substring"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.SplitStrings(System.String,System.Int32)">
            <summary>
            Split a long string into separate lines based on a max length
            </summary>
            <param name="instr"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.PadString(System.String,System.Int32)">
            <summary>
            Truncate or pad a string with spaces to a certain length
            </summary>
            <param name="instr"></param>
            <param name="maxlen"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.ReplaceCharAtPosition(System.String@,System.Char,System.Int32)">
            <summary>
            Replace a char in a string with another
            </summary>
            <param name="str">The string to change a character in</param>
            <param name="newChar">The new character to be used</param>
            <param name="position">The position to use the new character</param>
            <returns>a string with the character replaced</returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.ReplaceStringAtPosition(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            replace a length of string in a string with another string
            </summary>
            <param name="str"></param>
            <param name="newstr"></param>
            <param name="startpos"></param>
            <param name="endpos"></param>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.ReplaceAllChars(System.String,System.Char,System.Char)">
            <summary>
            Replace all instances of a char with another char
            </summary>
            <param name="origString"></param>
            <param name="replaceThis"></param>
            <param name="withThis"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.ApplyTrim(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Trim a string of a certain number of chars, either from the start or the end
            </summary>
            <param name="origString"></param>
            <param name="isFront"></param>
            <param name="length"></param>
            <param name="relativeStart">front=true, start=relativestart. front=end, start=end-length+relativestart</param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.MergeWhiteSpace(System.String,System.Char)">
            <summary>
            merges all consecutive whitespace into one character
            </summary>
            <param name="origString"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.CleanString(System.String)">
            <summary>
            removes \n \r and \0 from the start and end of a string
            </summary>
            <param name="origString"></param>
            <returns>the 'cleaned' string</returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.AddText(System.String,System.String,System.Boolean)">
            <summary>
            append/prepend text to a string
            </summary>
            <param name="origString"></param>
            <param name="addText"></param>
            <param name="isFront"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.ToCamelCase(System.String,System.Boolean,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Auto capitalise a string - first letter in each word is capitalised, rest are lower case
            </summary>
            <param name="origString">The string to change</param>
            <param name="capitaliseInitial">Should the first letter be capitalised?</param>
            <param name="capitaliseWordString"> </param>
            <returns>the auto capitalised string</returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.RemoveComments(System.String)">
            <summary>
            remove comment lines etc
            </summary>
            <param name="multiline"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.ClassExtras.StringExtras.GetFirstRepetition(System.String,System.String,System.Int32)">
            <summary>
            get first block of repetitions in string
            </summary>
            <param name="instr"></param>
            <param name="pattern"></param>
            <param name="minCount"></param>
            <returns>count,start position, end pos - must be more than mincount</returns>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.NetExtras">
            <summary>
            example usage: https://github.com/andreigec/ExtractTransform
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.NetExtras.WebClientEx">
            <summary>
            add timeout to web client
            </summary>
        </member>
        <member name="P:ANDREICSLIB.ClassExtras.NetExtras.WebClientEx.Timeout">
            <summary>
            timeout in MS
            </summary>
        </member>
        <member name="T:ANDREICSLIB.ClassExtras.ZipExtras">
            <summary>
            example usage: https://github.com/andreigec/Dwarf-Fortress-Mod-Merger
            </summary>
        </member>
        <member name="T:ANDREICSLIB.Extracters.JSONExtract">
            <summary>
            download a webpage as json, and convert json to a dictionary
            </summary>
        </member>
        <member name="T:ANDREICSLIB.Extracters.JsonRequest">
            <summary>
            Create Http Request, using json, and read Http Response.
            </summary>
        </member>
        <member name="P:ANDREICSLIB.Extracters.JsonRequest.URL">
            <summary>
            Url of http server wich request will be created to.
            </summary>
        </member>
        <member name="P:ANDREICSLIB.Extracters.JsonRequest.Verb">
            <summary>
            HTTP Verb wich will be used. Eg. GET, POST, PUT, DELETE.
            </summary>
        </member>
        <member name="P:ANDREICSLIB.Extracters.JsonRequest.Content">
            <summary>
            Request content, Json by default.
            </summary>
        </member>
        <member name="P:ANDREICSLIB.Extracters.JsonRequest.Credentials">
            <summary>
            User and Password for Basic Authentication
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Extracters.JsonRequest.#ctor(System.String,System.String)">
            <summary>
            Constructor Overload that allows passing URL and the VERB to be used.
            </summary>
            <param name="url">URL which request will be created</param>
            <param name="verb">Http Verb that will be userd in this request</param>
        </member>
        <member name="M:ANDREICSLIB.Extracters.JsonRequest.#ctor">
            <summary>
            Default constructor overload without any paramter
            </summary>
        </member>
        <member name="T:ANDREICSLIB.Helpers.AsyncHelpers">
            <summary>
            example usage: https://github.com/andreigec/Backgrounder
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ANDREICSLIB.Helpers.AsyncHelpers.RunSync(System.Func{System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:ANDREICSLIB.Helpers.AsyncHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})" -->
        <member name="T:ANDREICSLIB.Helpers.HistogramOCR">
            <summary>
            example usage: https://github.com/andreigec/Word-Find-Solver
            </summary>
        </member>
        <member name="F:ANDREICSLIB.Helpers.HistogramOCR.BitmapBoolArray.bitmapBool">
            <summary>
            true if value, false if white
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Helpers.HistogramOCR.#ctor(System.Int32,System.Int32)">
            <summary>
            initialise with a file, or blank
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Helpers.HistogramOCR.SplitUp(System.Drawing.Bitmap,System.Int32)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <param name="whiteToSpace">default = will calculate</param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.HistogramOCR.Train(System.Drawing.Bitmap,System.Char)">
            <summary>
            take an image of a letter and a character of what it is, and train the ocr
            </summary>
            <param name="filename"></param>
            <param name="letterChar"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.HistogramOCR.GetOffScore(System.Drawing.Bitmap,ANDREICSLIB.Helpers.HistogramOCR.HistogramLetter)">
            <summary>
            get score. score of 0 is perfect
            </summary>
            <param name="b"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.HistogramOCR.Normalise(System.Drawing.Bitmap)">
            <summary>
            trim white and resize to created dimensions
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.Helpers.ListViewSorter">
            <summary>
            example usage: https://github.com/andreigec/IP-Scanrar
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Helpers.ListViewSorter.ColumnSort(ANDREICSLIB.Helpers.ListViewSorter,System.Windows.Forms.ListView,System.Int32,System.Nullable{System.Windows.Forms.SortOrder})">
            <summary>
            call this from column click. 
            </summary>
            <param name="lvs">an instance of listviewsorter</param>
            <param name="lv"></param>
            <param name="column"></param>
            <param name="forceorder">if set to a value, will sort by that all the time, otherwise will sort as normal</param>
        </member>
        <member name="T:ANDREICSLIB.Helpers.Networking">
            <summary>
            example usage: https://github.com/andreigec/FireWind
            </summary>
        </member>
        <member name="T:ANDREICSLIB.Helpers.BTree">
            <summary>
            example usage: https://github.com/andreigec/Meal-Chooser
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Helpers.BTree.LoadFileIntoTree(System.String,ANDREICSLIB.Helpers.Btree{System.String},System.String,System.Boolean)">
            <summary>
            default for strings
            </summary>
            <param name="filename"></param>
            <param name="root"></param>
            <param name="levelSeparator"></param>
            <param name="RecreateFileIfInvalid"></param>
        </member>
        <member name="M:ANDREICSLIB.Helpers.BTree.LoadFileIntoTree``1(System.String,ANDREICSLIB.Helpers.Btree{``0},System.Func{System.String,``0},System.String,System.Boolean)">
            <summary>
            Load a file into a tree structure based on levels. by default '1 \n \t 2' in a file will create a parent with a child node
            </summary>
            <typeparam name="T">class type, usually string</typeparam>
            <param name="filename"></param>
            <param name="root"></param>
            <param name="addfunc">T must be able to be instantiated with a string. call with a=>new T(a) where T is your class, or the return string method</param>
            <param name="levelSeparator"></param>
            <param name="RecreateFileIfInvalid"></param>
        </member>
        <member name="T:ANDREICSLIB.Helpers.EmbeddedResources">
            <summary>
            example usage: https://github.com/andreigec/Crypto-Gram-Solve
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Helpers.EmbeddedResources.ReadEmbeddedImage(System.String)">
            <summary>
            get the contents of an embedded resource image
            </summary>
            <param name="filename">pass the file name</param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.EmbeddedResources.ReadEmbeddedResource(System.String)">
            <summary>
            get the contents of an embedded resource
            </summary>
            <param name="filename">pass the file name</param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.EmbeddedResources.GetResourceStream(System.String,System.Reflection.Assembly)">
            <summary>
            get the underlying streamreader for the resource
            </summary>
            <param name="filename"></param>
            <param name="a">assembly.getexecutingassembly</param>
            <returns>make sure to close the streamreader if not null</returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.FormConfigRestore.LoadProperty(System.Object,System.String,System.Object)">
            <summary>
            set the value of the control object
            </summary>
            <param name="c"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:ANDREICSLIB.Helpers.FormConfigRestore.LoadProperty(System.Windows.Forms.Form,System.String,System.String,System.Object)">
            <summary>
            find the matching control for the name given
            </summary>
            <param name="baseform"></param>
            <param name="name"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:ANDREICSLIB.Helpers.FormConfigRestore.LoadConfig(System.Windows.Forms.Form,System.String)">
            <summary>
            load the saved config file. will automatically load all the control values, and return the manual strings
            </summary>
            <param name="baseform">pass the base form</param>
            <param name="filename">the saved config flename</param>
            <returns>returns null on error, and a list of tuples of saved literal strings otherwise</returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.FormConfigRestore.SaveConfig(System.Windows.Forms.Form,System.String,System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Collections.Generic.IEnumerable{System.Windows.Forms.ToolStripItem},System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            save controls, tool strips, and manually saved strings
            call this on form load
            </summary>
            <param name="baseform"></param>
            <param name="filename"></param>
            <param name="saveControls">a list of form controlls to save, except tool strip items</param>
            <param name="saveToolStripItems">list of tool strip menu items which the checked value should be saved for</param>
            <param name="literalStrings">a list of tuple string/strings to manually save</param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.Helpers.MatrixOps">
            <summary>
            example usage: https://github.com/andreigec/Sudoku-Solver
            </summary>
        </member>
        <member name="T:ANDREICSLIB.Helpers.PersistantCache">
            <summary>
            example usage: https://github.com/andreigec/GithubSensitiveSearch
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Helpers.PersistantCache.Cache``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            pass in a sync action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.PersistantCache.Cache``1(System.Linq.Expressions.Expression{System.Func{System.Threading.Tasks.Task{``0}}},System.String)">
            <summary>
            pass in an async action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.Helpers.CustomTimeZones">
            <summary>
            example usage: https://github.com/andreigec/Timezone-Sleep-Converter
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Helpers.CustomTimeZones.Create">
            <summary>
            Create the list of timezones before using
            </summary>
        </member>
        <member name="T:ANDREICSLIB.Helpers.Reflection">
            <summary>
            example usage: https://github.com/andreigec/Backgrounder
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Helpers.Reflection.GetFieldName(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            get the name of a passed parameter
            </summary>
            <param name="memberExpression">() => variable</param>
            <returns>variable name</returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.Reflection.GetFieldValue(System.Object,System.String)">
            <summary>
            get a field or property of a class instance
            </summary>
            <param name="classInstance"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.Reflection.GetFieldNamesAndValues(System.Object)">
            <summary>
            get a tuple list of the type name and type values of an object
            </summary>
            <param name="classInstance">the class you want the values for</param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.Reflection.SerialiseObject(System.Object,System.String)">
            <summary>
            serialise an object to a file
            </summary>
            <param name="classInstance"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.Reflection.SerialiseObject(System.Object)">
            <summary>
            serialise an object to a return string
            </summary>
            <param name="classInstance"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.Reflection.DeserialiseObject(System.String,System.Type,System.Boolean)">
            <summary>
            deserialise a file to an object from a file
            </summary>
            <param name="objectType"></param>
            <param name="filename"></param>
            <param name="ignoreErrors"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.Reflection.DeserialiseObject(System.Type,System.String,System.Boolean)">
            <summary>
            deserialise an object from a serialised string
            </summary>
            <param name="objectType"></param>
            <param name="serialisedObjectString"></param>
            <param name="ignoreErrors"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.Helpers.Reflection.DeserialiseObject(System.Type,System.Collections.Generic.List{System.Tuple{System.String,System.String}},System.Boolean)">
            <summary>
            deserialise an object from a list of tuple string,string s
            </summary>
            <param name="objectType"></param>
            <param name="objectFieldNameAndValues">field name,field val</param>
            <param name="ignoreErrors"></param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.Helpers.TimeUpdates">
            <summary>
            example usage: https://github.com/andreigec/Consultant-Plus
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.SelectItemFromListView">
            <summary>
            example usage: https://github.com/andreigec/MTG-Proxy-Maker
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemFromListView.#ctor">
            <summary>
            call from static showdialog
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemFromListView.ShowDialog(System.String,System.String,System.Collections.Generic.List{System.Windows.Forms.ListViewItem},System.Boolean,System.Int32)">
            <summary>
            return selected values after dialog closes. if canceled, will return null
            </summary>
            <param name="labelText"></param>
            <param name="title"></param>
            <param name="listBoxItems"></param>
            <param name="multiselect"></param>
            <param name="mustSelectCountIN"></param>
            <returns></returns>
        </member>
        <member name="F:ANDREICSLIB.NewControls.SelectItemFromListView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemFromListView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemFromListView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.GetStringImageCompare">
            <summary>
            example usage: https://github.com/andreigec/Histogram-OCR-Trainer
            </summary>
        </member>
        <member name="F:ANDREICSLIB.NewControls.GetStringImageCompare.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.GetStringImageCompare.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.GetStringImageCompare.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ANDREICSLIB.NewControls.GrowingLabel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.GrowingLabel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.GrowingLabel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.DragBar">
            <summary>
            example usage: https://github.com/andreigec/Timezone-Sleep-Converter
            </summary>
        </member>
        <member name="F:ANDREICSLIB.NewControls.DragBar.barEndX">
            <summary>
            x value for the end of the bar (set on paint)
            </summary>
        </member>
        <member name="F:ANDREICSLIB.NewControls.DragBar.barX">
            <summary>
            x value for the start of the bar (set on paint)
            </summary>
        </member>
        <member name="F:ANDREICSLIB.NewControls.DragBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.DragBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.DragBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.GetStringBox">
            <summary>
            example usage: https://github.com/andreigec/COD4-Server-Tool
            </summary>
        </member>
        <member name="F:ANDREICSLIB.NewControls.GetStringBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.GetStringBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.GetStringBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.ImageDraw">
            <summary>
            example usage: https://github.com/andreigec/BeadSprite-Pro
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.ImageDraw.GetRealPos(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            translate a position over the image to the location on the original image
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="F:ANDREICSLIB.NewControls.ImageDraw.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.ImageDraw.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.ImageDraw.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.MassVariableEdit">
            <summary>
            example usage: https://github.com/andreigec/Word-Find-Solver
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.MassVariableEdit.AcceptFinalTextBoxText">
            <summary>
            will get called to do final validations on textbox text before accepting 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:ANDREICSLIB.NewControls.MassVariableEdit.HandleKeyPress">
            <summary>
            will get called on textbox.keypress if set
            </summary>
            <param name="keyChar"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.NewControls.MassVariableEdit.ShowDialog(System.String,System.Object,System.Collections.Generic.List{ANDREICSLIB.NewControls.MassVariableEdit.TextBoxItems})">
            <summary>
            populate with the variable names from a class. will also copy the instances values as preset text by default
            </summary>
            <param name="formText"> </param>
            <param name="classInstance"> </param>
            <param name="overload"> </param>
            <returns></returns>
        </member>
        <member name="M:ANDREICSLIB.NewControls.MassVariableEdit.ShowDialog(System.String,System.Collections.Generic.List{ANDREICSLIB.NewControls.MassVariableEdit.TextBoxItems})">
            <summary>
            show a dialog from a list of variable names,variable values,and validation/handlers
            </summary>
            <param name="items">list of items to add. param name,preset value,keypress validation</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ANDREICSLIB.NewControls.MassVariableEdit.TextBoxItems.#ctor(System.String,System.String,ANDREICSLIB.NewControls.MassVariableEdit.HandleKeyPress,ANDREICSLIB.NewControls.MassVariableEdit.AcceptFinalTextBoxText,System.String)" -->
        <member name="F:ANDREICSLIB.NewControls.MassVariableEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.MassVariableEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.MassVariableEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.MultipleMessageBox">
            <summary>
            example usage: https://github.com/andreigec/Music-File-Info-Editor
            </summary>
        </member>
        <member name="F:ANDREICSLIB.NewControls.MultipleMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.MultipleMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.MultipleMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.SelectItemsFromCheckBox">
            <summary>
            example usage: https://github.com/andreigec/BeadSprite-Pro
            </summary>
        </member>
        <member name="F:ANDREICSLIB.NewControls.SelectItemsFromCheckBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemsFromCheckBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemsFromCheckBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.SerializableDictionary`2">
            <summary>
            example usage: https://github.com/andreigec/FireWind
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:ANDREICSLIB.NewControls.SelectItemFromListBox">
            <summary>
            example usage: https://github.com/andreigec/Meal-Chooser
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemFromListBox.#ctor">
            <summary>
            call from static showdialog
            </summary>
        </member>
        <member name="T:ANDREICSLIB.NewControls.SelectItemFromListBox.SelectItem">
            <summary>
            not a control
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemFromListBox.ShowDialog(System.String,System.String,System.Collections.Generic.List{ANDREICSLIB.NewControls.SelectItemFromListBox.SelectItem},System.Boolean,System.Int32)">
            <summary>
            return selected values after dialog closes. if canceled, will return null
            </summary>
            <param name="labelText"></param>
            <param name="title"></param>
            <param name="listBoxItems"></param>
            <param name="multiselect"></param>
            <param name="mustSelectCountIN"></param>
            <returns></returns>
        </member>
        <member name="F:ANDREICSLIB.NewControls.SelectItemFromListBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemFromListBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.NewControls.SelectItemFromListBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ANDREICSLIB.Licensing.AboutScreen.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Licensing.AboutScreen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.Licensing.AboutScreen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ANDREICSLIB.Licensing.HelpScreen.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Licensing.HelpScreen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ANDREICSLIB.Licensing.HelpScreen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ANDREICSLIB.Licensing.Licensing.ShowingAbout">
            <summary>
            so we dont allow 2 instances of the about dialog
            </summary>
        </member>
        <member name="F:ANDREICSLIB.Licensing.Licensing.ShowingHelp">
            <summary>
            so we dont allow 2 instances of the help dialog
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Licensing.Licensing.CreateLicense(System.Windows.Forms.Form,System.Windows.Forms.MenuStrip,ANDREICSLIB.Licensing.Licensing.SolutionDetails)">
            <summary>
            Adds functionality for auto updating application, and creation of about screen.
            Inserts about tab on menu strip
            </summary>
            <param name="baseform"></param>
            <param name="newsd"></param>
            <param name="existingMenuStrip"></param>
        </member>
        <member name="T:ANDREICSLIB.ClassReplacements.PanelReplacement">
            <summary>
            example usage: https://github.com/andreigec/XQueens
            </summary>
        </member>
        <member name="M:ANDREICSLIB.ClassReplacements.PanelReplacement.FitPanel(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            make sure the panel fits all the controls in it
            </summary>
        </member>
        <member name="F:ANDREICSLIB.Transformers.CsvExport.fields">
            <summary>
            To keep the ordered list of column names
            </summary>
        </member>
        <member name="F:ANDREICSLIB.Transformers.CsvExport.rows">
            <summary>
            The list of rows
            </summary>
        </member>
        <member name="P:ANDREICSLIB.Transformers.CsvExport.currentRow">
            <summary>
            The current row
            </summary>
        </member>
        <member name="P:ANDREICSLIB.Transformers.CsvExport.Item(System.String)">
            <summary>
            Set a value on this column
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Transformers.CsvExport.AddRow">
            <summary>
            Call this before setting any fields on a row
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Transformers.CsvExport.MakeValueCsvFriendly(System.Object)">
            <summary>
            Converts a value to how it should output in a csv file
            If it has a comma, it needs surrounding with double quotes
            Eg Sydney, Australia -> "Sydney, Australia"
            Also if it contains any double quotes ("), then they need to be replaced with quad quotes[sic] ("")
            Eg "Dangerous Dan" McGrew -> """Dangerous Dan"" McGrew"
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Transformers.CsvExport.Export(System.Boolean)">
            <summary>
            Output all rows as a CSV returning a string
            </summary>
        </member>
        <member name="M:ANDREICSLIB.Transformers.CsvExport.ExportToFile(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Exports to a file
            </summary>
        </member>
    </members>
</doc>
